private import bicep
private import codeql.bicep.Concepts

/**
 * Module for Azure Dashboard resource types.
 * Provides classes for working with Grafana and other dashboard services.
 * See: https://learn.microsoft.com/en-us/azure/templates/microsoft.dashboard/
 */
module Dashboards {
  /**
   * Represents a Microsoft.Dashboard/grafana resource.
   * See: https://learn.microsoft.com/en-us/azure/templates/microsoft.dashboard/grafana
   */
  class GrafanaResource extends AzureResource {
    /**
     * Constructs a GrafanaResource for Microsoft.Dashboard/grafana resources.
     */
    GrafanaResource() {
      this.getResourceType().regexpMatch("^Microsoft.Dashboard/grafana@.*")
    }

    /**
     * Returns the identity property.
     */
    Expr getIdentity() { result = this.getProperty("identity") }

    /**
     * Returns the properties object for the grafana resource.
     */
    GrafanaProperties::Properties getProperties() { result = this.getProperty("properties") }

    /**
     * Returns a string representation of the grafana resource.
     */
    override string toString() { result = "GrafanaResource" }
  }

  /**
   * Represents a public Microsoft.Dashboard/grafana resource with public network access enabled.
   */
  class PublicGrafanaResource extends PublicResource {
    private GrafanaResource grafanaResource;

    /**
     * Constructs a PublicGrafanaResource for any Microsoft.Dashboard/grafana resource type
     * that has public network access enabled.
     */
    PublicGrafanaResource() {
      grafanaResource.getProperties().publicNetworkAccess() = "Enabled" and
      this = grafanaResource
    }

    /**
     * Gets the property that indicates public network access for the Grafana resource.
     */
    override Expr getPublicAccessProperty() {
      result = grafanaResource.getProperties().getPublicNetworkAccess()
    }

    override string toString() { result = "Public Grafana Resource" }
  }

  /**
   * Module containing property classes for Grafana resources.
   * Provides access to Grafana configurations, integrations, security settings, and more.
   */
  module GrafanaProperties {
    /**
     * Represents the properties object for a Grafana resource.
     */
    class Properties extends ResourceProperties {
      private GrafanaResource grafanaResource;

      /**
       * Constructs a Properties object for the given Grafana resource.
       */
      Properties() { this = grafanaResource.getProperty("properties") }

      /**
       * Returns the parent GrafanaResource.
       */
      GrafanaResource getGrafanaResource() { result = grafanaResource }

      /**
       * Returns the API key setting property.
       */
      StringLiteral getApiKey() { result = this.getProperty("apiKey") }

      /**
       * Returns the value of the API key setting ('Enabled' or 'Disabled').
       */
      string apiKey() { result = this.getApiKey().getValue() }

      /**
       * Returns true if API key setting is defined.
       */
      predicate hasApiKey() { exists(this.getApiKey()) }

      /**
       * Returns the autoGeneratedDomainNameLabelScope property.
       */
      StringLiteral getAutoGeneratedDomainNameLabelScope() { 
        result = this.getProperty("autoGeneratedDomainNameLabelScope") 
      }

      /**
       * Returns the value of the autoGeneratedDomainNameLabelScope.
       */
      string autoGeneratedDomainNameLabelScope() { 
        result = this.getAutoGeneratedDomainNameLabelScope().getValue() 
      }

      /**
       * Returns true if autoGeneratedDomainNameLabelScope is defined.
       */
      predicate hasAutoGeneratedDomainNameLabelScope() { 
        exists(this.getAutoGeneratedDomainNameLabelScope()) 
      }

      /**
       * Returns the deterministicOutboundIP property.
       */
      StringLiteral getDeterministicOutboundIP() { 
        result = this.getProperty("deterministicOutboundIP") 
      }

      /**
       * Returns the value of the deterministicOutboundIP ('Enabled' or 'Disabled').
       */
      string deterministicOutboundIP() { 
        result = this.getDeterministicOutboundIP().getValue() 
      }

      /**
       * Returns true if deterministicOutboundIP is defined.
       */
      predicate hasDeterministicOutboundIP() { 
        exists(this.getDeterministicOutboundIP()) 
      }

      /**
       * Returns the enterpriseConfigurations property.
       */
      EnterpriseConfigurations getEnterpriseConfigurations() { 
        result = this.getProperty("enterpriseConfigurations") 
      }

      /**
       * Returns true if enterpriseConfigurations is defined.
       */
      predicate hasEnterpriseConfigurations() { 
        exists(this.getEnterpriseConfigurations()) 
      }

      /**
       * Returns the grafanaConfigurations property.
       */
      GrafanaConfigurations getGrafanaConfigurations() { 
        result = this.getProperty("grafanaConfigurations") 
      }

      /**
       * Returns true if grafanaConfigurations is defined.
       */
      predicate hasGrafanaConfigurations() { 
        exists(this.getGrafanaConfigurations()) 
      }

      /**
       * Returns the grafanaIntegrations property.
       */
      GrafanaIntegrations getGrafanaIntegrations() { 
        result = this.getProperty("grafanaIntegrations") 
      }

      /**
       * Returns true if grafanaIntegrations is defined.
       */
      predicate hasGrafanaIntegrations() { 
        exists(this.getGrafanaIntegrations()) 
      }

      /**
       * Returns the grafanaMajorVersion property.
       */
      StringLiteral getGrafanaMajorVersion() { 
        result = this.getProperty("grafanaMajorVersion") 
      }

      /**
       * Returns the value of the grafanaMajorVersion.
       */
      string grafanaMajorVersion() { 
        result = this.getGrafanaMajorVersion().getValue() 
      }

      /**
       * Returns true if grafanaMajorVersion is defined.
       */
      predicate hasGrafanaMajorVersion() { 
        exists(this.getGrafanaMajorVersion()) 
      }

      /**
       * Returns the grafanaPlugins property.
       */
      Object getGrafanaPlugins() { 
        result = this.getProperty("grafanaPlugins") 
      }

      /**
       * Returns true if grafanaPlugins is defined.
       */
      predicate hasGrafanaPlugins() { 
        exists(this.getGrafanaPlugins()) 
      }

      /**
       * Returns the publicNetworkAccess property.
       */
      StringLiteral getPublicNetworkAccess() { 
        result = this.getProperty("publicNetworkAccess") 
      }

      /**
       * Returns the value of the publicNetworkAccess ('Enabled' or 'Disabled').
       */
      string publicNetworkAccess() { 
        result = this.getPublicNetworkAccess().getValue() 
      }

      /**
       * Returns true if publicNetworkAccess is defined.
       */
      predicate hasPublicNetworkAccess() { 
        exists(this.getPublicNetworkAccess()) 
      }

      /**
       * Returns the zoneRedundancy property.
       */
      StringLiteral getZoneRedundancy() { 
        result = this.getProperty("zoneRedundancy") 
      }

      /**
       * Returns the value of the zoneRedundancy ('Enabled' or 'Disabled').
       */
      string zoneRedundancy() { 
        result = this.getZoneRedundancy().getValue() 
      }

      /**
       * Returns true if zoneRedundancy is defined.
       */
      predicate hasZoneRedundancy() { 
        exists(this.getZoneRedundancy()) 
      }

      override string toString() { result = "GrafanaProperties" }
    }

    /**
     * Represents the enterpriseConfigurations property for a Grafana resource.
     */
    class EnterpriseConfigurations extends Object {
      private Properties properties;

      /**
       * Constructs an EnterpriseConfigurations object.
       */
      EnterpriseConfigurations() { this = properties.getProperty("enterpriseConfigurations") }

      /**
       * Returns the marketplaceAutoRenew property.
       */
      StringLiteral getMarketplaceAutoRenew() { 
        result = this.getProperty("marketplaceAutoRenew") 
      }

      /**
       * Returns the value of the marketplaceAutoRenew ('Enabled' or 'Disabled').
       */
      string marketplaceAutoRenew() { 
        result = this.getMarketplaceAutoRenew().getValue() 
      }

      /**
       * Returns true if marketplaceAutoRenew is defined.
       */
      predicate hasMarketplaceAutoRenew() { 
        exists(this.getMarketplaceAutoRenew()) 
      }

      /**
       * Returns the marketplacePlanId property.
       */
      StringLiteral getMarketplacePlanId() { 
        result = this.getProperty("marketplacePlanId") 
      }

      /**
       * Returns the value of the marketplacePlanId.
       */
      string marketplacePlanId() { 
        result = this.getMarketplacePlanId().getValue() 
      }

      /**
       * Returns true if marketplacePlanId is defined.
       */
      predicate hasMarketplacePlanId() { 
        exists(this.getMarketplacePlanId()) 
      }

      string toString() { result = "EnterpriseConfigurations" }
    }

    /**
     * Represents the grafanaConfigurations property for a Grafana resource.
     */
    class GrafanaConfigurations extends Object {
      private Properties properties;

      /**
       * Constructs a GrafanaConfigurations object.
       */
      GrafanaConfigurations() { this = properties.getProperty("grafanaConfigurations") }

      /**
       * Returns the security property.
       */
      Security getSecurity() { 
        result = this.getProperty("security") 
      }

      /**
       * Returns true if security is defined.
       */
      predicate hasSecurity() { 
        exists(this.getSecurity()) 
      }

      /**
       * Returns the smtp property.
       */
      Smtp getSmtp() { 
        result = this.getProperty("smtp") 
      }

      /**
       * Returns true if smtp is defined.
       */
      predicate hasSmtp() { 
        exists(this.getSmtp()) 
      }

      /**
       * Returns the snapshots property.
       */
      Snapshots getSnapshots() { 
        result = this.getProperty("snapshots") 
      }

      /**
       * Returns true if snapshots is defined.
       */
      predicate hasSnapshots() { 
        exists(this.getSnapshots()) 
      }

      /**
       * Returns the unifiedAlertingScreenshots property.
       */
      UnifiedAlertingScreenshots getUnifiedAlertingScreenshots() { 
        result = this.getProperty("unifiedAlertingScreenshots") 
      }

      /**
       * Returns true if unifiedAlertingScreenshots is defined.
       */
      predicate hasUnifiedAlertingScreenshots() { 
        exists(this.getUnifiedAlertingScreenshots()) 
      }

      /**
       * Returns the users property.
       */
      Users getUsers() { 
        result = this.getProperty("users") 
      }

      /**
       * Returns true if users is defined.
       */
      predicate hasUsers() { 
        exists(this.getUsers()) 
      }

      string toString() { result = "GrafanaConfigurations" }
    }

    /**
     * Represents the security property for Grafana configurations.
     */
    class Security extends Object {
      private GrafanaConfigurations grafanaConfigurations;

      /**
       * Constructs a Security object.
       */
      Security() { this = grafanaConfigurations.getProperty("security") }

      /**
       * Returns the csrfAlwaysCheck property.
       */
      Boolean getCsrfAlwaysCheck() { 
        result = this.getProperty("csrfAlwaysCheck") 
      }

      /**
       * Returns the value of csrfAlwaysCheck as a boolean.
       */
      boolean csrfAlwaysCheck() { 
        result = this.getCsrfAlwaysCheck().getBool() 
      }

      /**
       * Returns true if csrfAlwaysCheck is defined.
       */
      predicate hasCsrfAlwaysCheck() { 
        exists(this.getCsrfAlwaysCheck()) 
      }

      string toString() { result = "Security" }
    }

    /**
     * Represents the smtp property for Grafana configurations.
     */
    class Smtp extends Object {
      private GrafanaConfigurations grafanaConfigurations;

      /**
       * Constructs an Smtp object.
       */
      Smtp() { this = grafanaConfigurations.getProperty("smtp") }

      /**
       * Returns the enabled property.
       */
      Boolean getEnabled() { 
        result = this.getProperty("enabled") 
      }

      /**
       * Returns the value of enabled as a boolean.
       */
      boolean enabled() { 
        result = this.getEnabled().getBool() 
      }

      /**
       * Returns true if enabled is defined.
       */
      predicate hasEnabled() { 
        exists(this.getEnabled()) 
      }

      /**
       * Returns the fromAddress property.
       */
      StringLiteral getFromAddress() { 
        result = this.getProperty("fromAddress") 
      }

      /**
       * Returns the value of fromAddress.
       */
      string fromAddress() { 
        result = this.getFromAddress().getValue() 
      }

      /**
       * Returns true if fromAddress is defined.
       */
      predicate hasFromAddress() { 
        exists(this.getFromAddress()) 
      }

      /**
       * Returns the fromName property.
       */
      StringLiteral getFromName() { 
        result = this.getProperty("fromName") 
      }

      /**
       * Returns the value of fromName.
       */
      string fromName() { 
        result = this.getFromName().getValue() 
      }

      /**
       * Returns true if fromName is defined.
       */
      predicate hasFromName() { 
        exists(this.getFromName()) 
      }

      /**
       * Returns the host property.
       */
      StringLiteral getHost() { 
        result = this.getProperty("host") 
      }

      /**
       * Returns the value of host.
       */
      string host() { 
        result = this.getHost().getValue() 
      }

      /**
       * Returns true if host is defined.
       */
      predicate hasHost() { 
        exists(this.getHost()) 
      }

      /**
       * Returns the password property.
       */
      StringLiteral getPassword() { 
        result = this.getProperty("password") 
      }

      /**
       * Returns the value of password.
       */
      string password() { 
        result = this.getPassword().getValue() 
      }

      /**
       * Returns true if password is defined.
       */
      predicate hasPassword() { 
        exists(this.getPassword()) 
      }

      /**
       * Returns the skipVerify property.
       */
      Boolean getSkipVerify() { 
        result = this.getProperty("skipVerify") 
      }

      /**
       * Returns the value of skipVerify as a boolean.
       */
      boolean skipVerify() { 
        result = this.getSkipVerify().getBool() 
      }

      /**
       * Returns true if skipVerify is defined.
       */
      predicate hasSkipVerify() { 
        exists(this.getSkipVerify()) 
      }

      /**
       * Returns the startTLSPolicy property.
       */
      StringLiteral getStartTLSPolicy() { 
        result = this.getProperty("startTLSPolicy") 
      }

      /**
       * Returns the value of startTLSPolicy.
       */
      string startTLSPolicy() { 
        result = this.getStartTLSPolicy().getValue() 
      }

      /**
       * Returns true if startTLSPolicy is defined.
       */
      predicate hasStartTLSPolicy() { 
        exists(this.getStartTLSPolicy()) 
      }

      /**
       * Returns the user property.
       */
      StringLiteral getUser() { 
        result = this.getProperty("user") 
      }

      /**
       * Returns the value of user.
       */
      string user() { 
        result = this.getUser().getValue() 
      }

      /**
       * Returns true if user is defined.
       */
      predicate hasUser() { 
        exists(this.getUser()) 
      }

      string toString() { result = "Smtp" }
    }

    /**
     * Represents the snapshots property for Grafana configurations.
     */
    class Snapshots extends Object {
      private GrafanaConfigurations grafanaConfigurations;

      /**
       * Constructs a Snapshots object.
       */
      Snapshots() { this = grafanaConfigurations.getProperty("snapshots") }

      /**
       * Returns the externalEnabled property.
       */
      Boolean getExternalEnabled() { 
        result = this.getProperty("externalEnabled") 
      }

      /**
       * Returns the value of externalEnabled as a boolean.
       */
      boolean externalEnabled() { 
        result = this.getExternalEnabled().getBool() 
      }

      /**
       * Returns true if externalEnabled is defined.
       */
      predicate hasExternalEnabled() { 
        exists(this.getExternalEnabled()) 
      }

      string toString() { result = "Snapshots" }
    }

    /**
     * Represents the unifiedAlertingScreenshots property for Grafana configurations.
     */
    class UnifiedAlertingScreenshots extends Object {
      private GrafanaConfigurations grafanaConfigurations;

      /**
       * Constructs a UnifiedAlertingScreenshots object.
       */
      UnifiedAlertingScreenshots() { this = grafanaConfigurations.getProperty("unifiedAlertingScreenshots") }

      /**
       * Returns the captureEnabled property.
       */
      Boolean getCaptureEnabled() { 
        result = this.getProperty("captureEnabled") 
      }

      /**
       * Returns the value of captureEnabled as a boolean.
       */
      boolean captureEnabled() { 
        result = this.getCaptureEnabled().getBool() 
      }

      /**
       * Returns true if captureEnabled is defined.
       */
      predicate hasCaptureEnabled() { 
        exists(this.getCaptureEnabled()) 
      }

      string toString() { result = "UnifiedAlertingScreenshots" }
    }

    /**
     * Represents the users property for Grafana configurations.
     */
    class Users extends Object {
      private GrafanaConfigurations grafanaConfigurations;

      /**
       * Constructs a Users object.
       */
      Users() { this = grafanaConfigurations.getProperty("users") }

      /**
       * Returns the editorsCanAdmin property.
       */
      Boolean getEditorsCanAdmin() { 
        result = this.getProperty("editorsCanAdmin") 
      }

      /**
       * Returns the value of editorsCanAdmin as a boolean.
       */
      boolean editorsCanAdmin() { 
        result = this.getEditorsCanAdmin().getBool() 
      }

      /**
       * Returns true if editorsCanAdmin is defined.
       */
      predicate hasEditorsCanAdmin() { 
        exists(this.getEditorsCanAdmin()) 
      }

      /**
       * Returns the viewersCanEdit property.
       */
      Boolean getViewersCanEdit() { 
        result = this.getProperty("viewersCanEdit") 
      }

      /**
       * Returns the value of viewersCanEdit as a boolean.
       */
      boolean viewersCanEdit() { 
        result = this.getViewersCanEdit().getBool() 
      }

      /**
       * Returns true if viewersCanEdit is defined.
       */
      predicate hasViewersCanEdit() { 
        exists(this.getViewersCanEdit()) 
      }

      string toString() { result = "Users" }
    }

    /**
     * Represents the grafanaIntegrations property for a Grafana resource.
     */
    class GrafanaIntegrations extends Object {
      private Properties properties;

      /**
       * Constructs a GrafanaIntegrations object.
       */
      GrafanaIntegrations() { this = properties.getProperty("grafanaIntegrations") }

      /**
       * Returns the azureMonitorWorkspaceIntegrations property.
       */
      Array getAzureMonitorWorkspaceIntegrations() { 
        result = this.getProperty("azureMonitorWorkspaceIntegrations") 
      }

      /**
       * Returns a specific AzureMonitorWorkspaceIntegration by index.
       */
      AzureMonitorWorkspaceIntegration getAzureMonitorWorkspaceIntegration(int index) { 
        result = this.getAzureMonitorWorkspaceIntegrations().getElement(index) 
      }

      /**
       * Returns true if azureMonitorWorkspaceIntegrations is defined.
       */
      predicate hasAzureMonitorWorkspaceIntegrations() { 
        exists(this.getAzureMonitorWorkspaceIntegrations()) 
      }

      string toString() { result = "GrafanaIntegrations" }
    }

    /**
     * Represents an Azure Monitor Workspace Integration within grafanaIntegrations.
     */
    class AzureMonitorWorkspaceIntegration extends Object {
      private GrafanaIntegrations grafanaIntegrations;

      /**
       * Constructs an AzureMonitorWorkspaceIntegration object.
       */
      AzureMonitorWorkspaceIntegration() { 
        this = grafanaIntegrations.getAzureMonitorWorkspaceIntegrations().getElements() 
      }

      /**
       * Returns the azureMonitorWorkspaceResourceId property.
       */
      StringLiteral getAzureMonitorWorkspaceResourceId() { 
        result = this.getProperty("azureMonitorWorkspaceResourceId") 
      }

      /**
       * Returns the value of azureMonitorWorkspaceResourceId.
       */
      string azureMonitorWorkspaceResourceId() { 
        result = this.getAzureMonitorWorkspaceResourceId().getValue() 
      }

      /**
       * Returns true if azureMonitorWorkspaceResourceId is defined.
       */
      predicate hasAzureMonitorWorkspaceResourceId() { 
        exists(this.getAzureMonitorWorkspaceResourceId()) 
      }

      string toString() { result = "AzureMonitorWorkspaceIntegration" }
    }
  }
}
